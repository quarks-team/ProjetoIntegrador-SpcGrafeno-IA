name: Python CI Pipeline

# A pipeline será acionada em push para qualquer branch, exceto main, e em pull requests para main
on:
  push:
    branches-ignore:
      - main  # Ignora pushes diretos na branch main
  pull_request:
    branches:
      - main  # Aciona a pipeline apenas para pull requests que visam a branch main

jobs:
  test:

    runs-on: ubuntu-latest  # Define que a pipeline rodará em um ambiente Ubuntu

    steps:
    # Primeiro, verifica o código do repositório
    - name: Check out the code
      uses: actions/checkout@v3

    # Configura o Python com a versão mais recente (padrão é a versão estável mais recente)
    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'  # '3.x' usa a versão mais recente estável do Python

    # Instala as dependências
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  # Atualiza o pip
        pip install -r backendPython/requirements.txt  # Instala as dependências do projeto

    # Executa os testes unitários e de integração
    - name: Run tests
      run: |
        cd backendPython
        pytest --junitxml=results.xml  # Executa os testes com pytest e gera um relatório

    # Verificação de estilo de código com flake8
    - name: Lint with flake8
      run: |
        pip install flake8  # Instala o flake8
        flake8 backendPython --count --select=E9,F63,F7,F82 --show-source --statistics  # Verifica erros mais críticos
        flake8 backendPython --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics  # Permite warnings, mas sem falhar a execução

    # Geração do relatório de cobertura de testes
    - name: Generate coverage report
      run: |
        pip install coverage  # Instala a biblioteca coverage
        coverage run -m pytest  # Executa os testes para cobertura
        coverage report -m  # Gera o relatório de cobertura
        coverage xml  # Exporta o relatório em XML para análise de ferramentas CI

    # Se os testes passarem, isso indica que o pipeline foi bem-sucedido
    - name: Test and Coverage Passed
      if: success()
      run: echo "All tests passed, ready for merge!"

    # Caso alguma etapa falhe, o pipeline será bloqueado
    - name: Tests or Lint Failed
      if: failure()
      run: |
        echo "There were failures in the tests or linting."
        exit 1
